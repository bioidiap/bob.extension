c_compiler:
  - gcc                        # [linux and aarch64]
  - clang                      # [osx]
cxx_compiler:
  - gxx                        # [linux and aarch64]
  - clangxx                    # [osx]
fortran_compiler_version:
# matrix on linux, because the ABI breaks at GCC 8
  - 7.5.0                      # [linux and not (s390x or aarch64 or ppc64le)]
  - 8.4.0                      # [linux and not (s390x or aarch64 or ppc64le)]
  - 7.3.0                      # [linux and ppc64le]
  - 8.2.0                      # [linux and ppc64le]
  - 7.5.0                      # [linux and s390x]
  - 8.4.0                      # [linux and s390x]
  - 10.2.0                     # [linux and aarch64]
  - 10.2.0                     # [linux and aarch64]
rust_compiler:
  - rust
rust_compiler_version:
  - 1.40.0

c_compiler_version:        # [linux or osx]
  - 7.5.0                  # [linux and not (s390x or aarch64 or ppc64le)]
  - 7.3.0                  # [linux and ppc64le]
  - 7.5.0                  # [linux and s390x]
  - 10.2.0                 # [linux and aarch64]
  - 10                     # [osx]
cxx_compiler_version:      # [linux or osx]
  - 7.5.0                  # [linux and not (s390x or aarch64 or ppc64le)]
  - 7.3.0                  # [linux and ppc64le]
  - 7.5.0                  # [linux and s390x]
  - 10.2.0                 # [linux and aarch64]
  - 10                     # [osx]
clang_variant:
  - clang

macos_min_version:
  - 10.9
macos_machine:
  - x86_64-apple-darwin13.4.0
MACOSX_DEPLOYMENT_TARGET:
  - 10.9
CONDA_BUILD_SYSROOT:            # [osx]
  - /opt/MacOSX10.10.sdk        # [osx]
# This helps CMAKE find the sysroot. See
# https://cmake.org/cmake/help/v3.11/variable/CMAKE_OSX_SYSROOT.html
SDKROOT:                        # [osx]
  - /opt/MacOSX10.10.sdk        # [osx]
# makes autotools verbose
VERBOSE_AT:
  - V=1
# makes cmake verbose
VERBOSE_CM:
  - VERBOSE=1

# the blas implementations that we build against
blas_impl:
  - mkl

pin_run_as_build:
  libboost:
    max_pin: x.x.x
  py_boost:
    max_pin: x.x.x
  boost:
    max_pin: x.x.x

## the dependencies that we build against multiple versions
python:
  - 3.7
  - 3.8

zip_keys:
  -                             # [win]
    - vc                        # [win]
    - c_compiler                # [win]
    - cxx_compiler              # [win]
    - fortran_compiler_version  # [win]
    - python                    # [win]
    - nodejs                    # [win]
    - geos                      # [win]


# Here is the version of dependencies are used when building packages (build
# and host requirements). We keep a list of **all of them** here to make sure
# everything goes as expected in our conda build process. For the version of
# packages that are used for testing packages, see the recipe of bob-devel.
# The version here do not necessarily match the versions in bob-devel.

# This version of bob-devel will be used at test time of packages:
bob_devel:
  - 2021.07.14

# This version of beat-devel will be used at test time of packages. Notice it
# uses bob-devel and should have a version that is greater or equal its value
beat_devel:
  - 2021.07.14

# The build time only dependencies (build requirements).
# Updating these to the latest version all the time is OK and a good idea.
# These versions should match the versions inside bob-devel as well (if they
# overlap) so update them in both places.
cmake:
  - 3.14.0
make:
  - 4.2.1
pkg_config:
  - 0.29.2

# The host requirements. Ideally we want to build against the oldest possible version of
# packages so packages can be installed with a wide range of versions. But the versions
# here should also be compatible with the pinned versions in bob-devel. For most
# dependencies, you want to put the exact version of bob-devel in here as well. It is
# best to keep this in sync with:
# https://github.com/AnacondaRecipes/aggregate/blob/master/conda_build_config.yaml The
# names here should not contain dots or dashes. You should replace dots and dashes with
# underlines.
boost:
  - 1.73.0
click:
  - 8.0.1
click_plugins:
  - 1.1.1
coverage:
  - 5.5
dask:
  - 2021.6.0
dask_jobqueue:
  - 0.7.0
dask_ml:
  - 1.9.0
distributed:
  - 2021.6.0
docker_py:
  - 4.4.1
docopt:
  - 0.6.2
ffmpeg:
  - 4.2.2
freetype:
  - 2.10.4
giflib:
  - 5.2.1
h5py:
  - 2.10.0
hdf5:
  - 1.10.6
jinja2:
  - 3.0.0
jpeg:
  - 9b
jsonschema:
  - 3.2.0
libblitz:
  - 1.0.1
libpng:
  - 1.6.37
libtiff:
  - 4.2.0
matplotlib:
  - 3.3.4
mkl:
  - 2019.4
ncurses:
  - 6.2
nose:
  - 1.3.7
numba:
  - 0.53.1
numpy: # we build against numpy 1.17 but test against newer versions.
  - 1.17
opencv:
  - 4.5.0
pandas:
  - 1.2.4
pillow:
  - 8.2.0
psycopg2:
  - 2.8.6
pybind11:
  - 2.6.2
pyopengl:
  - 3.1.1
pyqtgraph:
  - 0.11.0
pytables:
  - 3.6.1
pytest:
  - 6.2.4
pytest_cov:
  - 2.11.1
python_graphviz:
  - 0.16
pytorch:
  - 1.7.0
pyyaml:
  - 5.4.1
pyzmq:
  - 20.0.0
qdarkstyle:
  - 3.0.2
qtpy:
  - 1.9.0
requests:
  - 2.25.1
schema:
  - 0.7.2
scikit_image:
  - 0.18.1
scikit_learn:
  - 0.24.2
scipy:
  - 1.6.2
setuptools:
  - 52.0.0
simplejson:
  - 3.17.2
six:
  - 1.15.0
sox:
  - 14.4.2
sphinx:
  - 4.0.1
sphinx_rtd_theme:
  - 0.4.3
sphinxcontrib_httpdomain:
  - 1.7.0
sphinxcontrib_programoutput:
  - 0.16
sphinxcontrib_mermaid:
  - 0.6.1
sqlalchemy:
  - 1.4.15
tabulate:
  - 0.8.9
tensorflow:
  - 2.4.1
termcolor:
  - 1.1.0
torchvision:
  - 0.8.1
tqdm:
  - 4.59.0
vlfeat:
  - 0.9.21
xarray:
  - 0.18.0
zc_buildout:
  - 2.13.3
zc_recipe_egg:
  - 2.0.7
